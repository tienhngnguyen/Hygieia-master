apiVersion: v1
kind: Template
metadata:
  annotations:
    iconClass: icon-java
  name: ${APPLICATION_NAME}
objects:
  # Hygieia API
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: ${APPLICATION_NAME}-api
    labels:
      application: ${APPLICATION_NAME}
  spec:
    tags:
    - name: latest
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: ${APPLICATION_NAME}-api
    labels:
      application: ${APPLICATION_NAME}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${APPLICATION_NAME}-api:latest
    source:
      contextDir: api
      git:
        ref: ${GIT_REF}
        uri: ${GIT_URI}
      type: Git
    strategy:
      type: Docker
      dockerStrategy:
        dockerfilePath: docker/Dockerfile
    triggers:
    - type: ConfigChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: ${APPLICATION_NAME}-api
    labels:
      app: ${APPLICATION_NAME}-api
  spec:
    replicas: 1
    selector:
      deploymentconfig: ${APPLICATION_NAME}-api
    strategy:
      resources: {}
      type: Recreate
    template:
      metadata:
        labels:
          app: ${APPLICATION_NAME}-api
          deploymentconfig: ${APPLICATION_NAME}-api
        name: ${APPLICATION_NAME}-api
      spec:
        containers:
        - env:
          - name: SPRING_DATA_MONGODB_DATABASE
            value: ${SPRING_DATA_MONGODB_DATABASE}
          - name: SPRING_DATA_MONGODB_HOST
            value: hygieia-mongodb
          - name: SPRING_DATA_MONGODB_USERNAME
            value: ${SPRING_DATA_MONGODB_USERNAME}
          - name: SPRING_DATA_MONGODB_PASSWORD
            value: ${SPRING_DATA_MONGODB_PASSWORD}
          image: ${APPLICATION_NAME}-api
          imagePullPolicy: Always
          name: ${APPLICATION_NAME}-api
          #TEMP: Execute as root
          serviceAccount: useroot
          serviceAccountName: useroot
          ports:
          - containerPort: 8778
            name: jolokia
            protocol: TCP
          - containerPort: 8080
            name: http
            protocol: TCP
          #livenessProbe:
           # failureThreshold: 2
            #httpGet:
             # path: "/api"
              #port: 8080
              #scheme: HTTP
            #initialDelaySeconds: 60
            #periodSeconds: 10
            #successThreashold: 1
            #timeoutSeconds: 1
          #readinessProbe:
           # failureThreshold: 3
            #httpGet:
              #path: "/api"
              #port: 8080
              #scheme: HTTP
            #initialDelaySeconds: 10
            #periodSeconds: 10
            #successThreashold: 1
            #timeoutSeconds: 1
          #resources:
            #limits:
              #memory: 500Mi
            #requests:
              #memory: 200Mi
        terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 75
        volumeMounts:
        - mountPath: /hygieia/logs
          name: ${APPLICATION_NAME}-api-data
        volumes:
          - name: ${APPLICATION_NAME}-api-data
            persistentVolumeClaim: 
              claimName: ${APPLICATION_NAME}-api
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}-api
        from:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}-api:latest
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${APPLICATION_NAME}-api
  spec:
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: ${VOLUME_CAPACITY_LOGS}
  # Hygieia API Service
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/dependencies: '[{"name":"hygieia-mongodb","namespace":"","kind":"Service"}]'
    labels:
      app: ${APPLICATION_NAME}-api
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-api-http
  spec:
    ports:
    - port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: ${APPLICATION_NAME}-api
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-api-route
  spec:
    to:
      kind: Service
      name: ${APPLICATION_NAME}-api-http
      weight: 100
# MongoDB  
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${APPLICATION_NAME}-mongodb
      comp-type: database
    name: ${APPLICATION_NAME}-mongodb
  spec:
    replicas: 1
    selector:
      deploymentconfig: ${APPLICATION_NAME}-mongodb
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: ${APPLICATION_NAME}
          comp-type: database
          deploymentconfig: ${APPLICATION_NAME}-mongodb
      spec:
        containers:
        - env:
          - name: MONGODB_USER
            value: ${SPRING_DATA_MONGODB_USERNAME}
          - name: MONGODB_PASSWORD
            value: ${SPRING_DATA_MONGODB_PASSWORD}
          - name: MONGODB_DATABASE
            value: ${SPRING_DATA_MONGODB_DATABASE}
          - name: MONGODB_ADMIN_PASSWORD
            value: ${SPRING_DATA_MONGODB_ADMIN_PASSWORD}
          image: openshift/mongodb
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 10
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 27017
            timeoutSeconds: 1
          name: ${APPLICATION_NAME}-mongodb
          ports:
          - containerPort: 27017
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD
                --eval="quit()"
            failureThreshold: 10
            initialDelaySeconds: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 512Mi
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/mongodb/data
            name: mongodb-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
          - name: mongodb-data
            persistentVolumeClaim: 
              claimName: ${APPLICATION_NAME}-mongodb
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}-mongodb
        from:
          kind: ImageStreamTag
          name: mongodb:3.2
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${APPLICATION_NAME}-mongodb
  spec:
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: ${VOLUME_CAPACITY_MONGO}
  # MongoDB Service
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-mongodb
  spec:
    ports:
    - name: mongo
      port: 27017
      protocol: TCP
      targetPort: 27017
    selector:
      deploymentconfig: ${APPLICATION_NAME}-mongodb
    sessionAffinity: None
    type: ClusterIP
#Hygieia UI
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: ${APPLICATION_NAME}-ui
    labels:
      app: ${APPLICATION_NAME}-ui
  spec:
    tags:
    - name: latest
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: ${APPLICATION_NAME}-ui
    labels:
      app: ${APPLICATION_NAME}-ui
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${APPLICATION_NAME}-ui:latest
    source:
      contextDir: UI
      git:
        ref: ${GIT_REF}
        uri: ${GIT_URI}
      type: Git
    strategy:
      type: Docker
      dockerStrategy:
        dockerfilePath: docker/Dockerfile
    triggers:
    - imageChange: {}
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: ${APPLICATION_NAME}-ui
    labels:
      app: ${APPLICATION_NAME}-ui
  spec:
    replicas: 1
    selector:
      app: ${APPLICATION_NAME}-ui
      deploymentconfig: ${APPLICATION_NAME}-ui
    strategy:
      resources: {}
      type: Recreate
    template:
      metadata:
        labels:
          app: ${APPLICATION_NAME}-ui
          deploymentconfig: ${APPLICATION_NAME}-ui
      spec:
        containers:
        - env:
          - name: HYGIEIA_API_HTTP_SERVICE_HOST
            value: hygieia-api-http
          - name: HOSTNAME_HTTP
            value: ${APPLICATION_NAME}-ui:80
          image: ${APPLICATION_NAME}-ui
          imagePullPolicy: Always
          name: ${APPLICATION_NAME}-ui
          #TEMP: Execute as root
          serviceAccount: useroot
          serviceAccountName: useroot
          ports:
          - containerPort: 80
            protocol: TCP
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /
              port: 80
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5            
          readinessProbe:
            failureThreshold: 10
            httpGet:
              path: /
              port: 80
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}-ui
        from:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}-ui:latest
      type: ImageChange
    - type: ConfigChange
  #Hygieia UI Service
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${APPLICATION_NAME}-ui
    name: ${APPLICATION_NAME}-ui
  spec:
    ports:
    - name: 8088-tcp
      port: 8088
      protocol: TCP
      targetPort: 80
    selector:
      deploymentconfig: ${APPLICATION_NAME}-ui
- apiVersion: v1
  kind: Route
  metadata:
    name: ${APPLICATION_NAME}-ui
  spec:
    to:
      kind: Service
      name: ${APPLICATION_NAME}-ui
# Collector - GitHub
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: ${APPLICATION_NAME}-github
    labels:
      application: ${APPLICATION_NAME}
  spec:
    tags:
    - name: latest
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: ${APPLICATION_NAME}-github
    labels:
      application: ${APPLICATION_NAME}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${APPLICATION_NAME}-github:latest
    source:
      contextDir: collectors/scm/github/
      git:
        ref: ${GIT_REF}
        uri: ${GIT_URI}
      type: Git
    strategy:
      type: Docker
      dockerStrategy:
        dockerfilePath: docker/Dockerfile
    triggers:
    - type: ConfigChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: ${APPLICATION_NAME}-github
    labels:
      app: ${APPLICATION_NAME}-github
  spec:
    replicas: 1
    selector:
      deploymentconfig: ${APPLICATION_NAME}-github
    strategy:
      resources: {}
      type: Recreate
    template:
      metadata:
        labels:
          app: ${APPLICATION_NAME}-github
          deploymentconfig: ${APPLICATION_NAME}-github
        name: ${APPLICATION_NAME}-github
      spec:
        containers:
        - env:
          - name: MONGODB_DATABASE
            value: ${SPRING_DATA_MONGODB_DATABASE}
          - name: HYGIEIA_MONGODB
            value: hygieia-mongodb
          - name: MONGODB_USER
            value: ${SPRING_DATA_MONGODB_USERNAME}
          - name: MONGODB_PASSWORD
            value: ${SPRING_DATA_MONGODB_PASSWORD}
          - name: HYGIEIA_API_HTTP_SERVICE_HOST
            value: hygieia-api-http
          - name: MONGODB_ADMIN_PASSWORD
            value: ${SPRING_DATA_MONGODB_ADMIN_PASSWORD}
          image: ${APPLICATION_NAME}-github
          imagePullPolicy: Always
          name: ${APPLICATION_NAME}-github
          #TEMP: Execute as root
          serviceAccount: useroot
          serviceAccountName: useroot
          ports:
          - containerPort: 8081
            name: http
            protocol: TCP
          #livenessProbe:
           # failureThreshold: 2
            #httpGet:
             # path: "/api"
              #port: 8080
              #scheme: HTTP
            #initialDelaySeconds: 60
            #periodSeconds: 10
            #successThreashold: 1
            #timeoutSeconds: 1
          #readinessProbe:
           # failureThreshold: 3
            #httpGet:
              #path: "/api"
              #port: 8080
              #scheme: HTTP
            #initialDelaySeconds: 10
            #periodSeconds: 10
            #successThreashold: 1
            #timeoutSeconds: 1
          resources:
            limits:
              memory: 500Mi
            requests:
              memory: 200Mi
        terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 75
        volumeMounts:
        - mountPath: /hygieia/logs
          name: ${APPLICATION_NAME}-github-data
        volumes:
          - name: ${APPLICATION_NAME}-github-data
            persistentVolumeClaim: 
              claimName: ${APPLICATION_NAME}-github
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}-github
        from:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}-github:latest
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${APPLICATION_NAME}-github
  spec:
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: ${VOLUME_CAPACITY_LOGS}
  # Hygieia Git Service
  # TO BE DELETED
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/dependencies: '[{"name":"hygieia-mongodb","namespace":"","kind":"Service"}]'
      service.alpha.openshift.io/dependencies: '[{"name":"hygieia-api-http","namespace":"","kind":"Service"}]'
    labels:
      app: ${APPLICATION_NAME}-github
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-github
    selector:
      deploymentconfig: ${APPLICATION_NAME}-github
  spec:
    ports:
    - port: 8081
      protocol: TCP
      targetPort: 8081
    selector:
      deploymentconfig: ${APPLICATION_NAME}-github
#- apiVersion: v1
 # kind: Route
  #metadata:
   # labels:
    #  application: ${APPLICATION_NAME}
    #name: ${APPLICATION_NAME}-github-route
  #spec:
   # to:
    #  kind: Service
     # name: ${APPLICATION_NAME}-github-http
      #weight: 100
# Collector - Jenkins
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: jenkins-blueocean
    labels:
      application: jenkins-blueocean
  spec:
    source:
      git:
        uri: https://github.com/tienhngnguyen/jenkins-blueocean
      type: Git
    strategy:                     
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: jenkins:latest
          namespace: openshift
      type: Source
    output:                       
      to:
        kind: ImageStreamTag
        name: jenkins-blueocean:latest
######COPY PASTE########
- kind: Route
  apiVersion: v1
  metadata: 
    name: ${JENKINS_SERVICE_NAME}
    annotations: 
      template.openshift.io/expose-uri: http://{.spec.host}{.spec.path}
  spec: 
    to: 
      kind: Service
      name: ${JENKINS_SERVICE_NAME}
    tls: 
      termination: edge
      insecureEdgeTerminationPolicy: Redirect 
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata: 
    name: ${JENKINS_SERVICE_NAME}
  spec: 
    accessModes: 
      - ReadWriteOnce
    resources: 
      requests: 
        storage: ${VOLUME_CAPACITY_JENKINS}
- kind: DeploymentConfig
  apiVersion: v1
  metadata: 
    name: ${JENKINS_SERVICE_NAME}
    annotations: 
      template.alpha.openshift.io/wait-for-ready: 'true'
  spec: 
    strategy: 
      type: Recreate
    triggers: 
    - type: ImageChange
      imageChangeParams: 
        automatic: true
        containerNames: 
        - jenkins
        from: 
          kind: ImageStreamTag
          name: jenkins-blueocean:latest
          namespace: dashboard
        lastTriggeredImage: ''
    - type: ConfigChange
    replicas: 1
    selector: 
      name: ${JENKINS_SERVICE_NAME}
    template: 
      metadata: 
        labels: 
          name: ${JENKINS_SERVICE_NAME}
    spec: 
      serviceAccountName: ${JENKINS_SERVICE_NAME}
      containers: 
      - name: jenkins
        image: jenkins-blueocean
        readinessProbe: 
          timeoutSeconds: 3
          initialDelaySeconds: 3
          httpGet: 
            path: "/login"
            port: 8080
        livenessProbe: 
          timeoutSeconds: 3
          initialDelaySeconds: 420
          failureThreshold: 30
          httpGet: 
            path: "/login"
            port: 8080
        env: 
        - name: OPENSHIFT_ENABLE_OAUTH
          value: ${ENABLE_OAUTH}
        - name: OPENSHIFT_ENABLE_REDIRECT_PROMPT
          value: 'true'
        - name: KUBERNETES_MASTER
          value: https://kubernetes.default:443
        - name: KUBERNETES_TRUST_CERTIFICATES
          value: 'true'
        - name: JENKINS_SERVICE_NAME
          value: ${JENKINS_SERVICE_NAME}
        - name: JNLP_SERVICE_NAME
          value: ${JNLP_SERVICE_NAME}
        resources: 
          limits: 
            memory: ${MEMORY_LIMIT}
        volumeMounts: 
        - name: ${JENKINS_SERVICE_NAME}-data
          mountPath: /var/lib/jenkins
        terminationMessagePath: /dev/termination-log
        imagePullPolicy: IfNotPresent
        capabilities: {}
        securityContext: 
          capabilities: {}
          privileged: false
      volumes: 
      - name: ${JENKINS_SERVICE_NAME}-data
        persistentVolumeClaim: 
          claimName: ${JENKINS_SERVICE_NAME}
      restartPolicy: Always
      dnsPolicy: ClusterFirst
- kind: ServiceAccount
  apiVersion: v1
  metadata: 
    name: ${JENKINS_SERVICE_NAME}
    annotations: 
      serviceaccounts.openshift.io/oauth-redirectreference.jenkins: '{\"kind\":\"OAuthRedirectReference\",\"apiVersion\":\"v1\",\"reference\":{\"kind\":\"Route\",\"name\":\"${JENKINS_SERVICE_NAME}\"}}'
- kind: RoleBinding
  apiVersion: v1
  metadata: 
    name: ${JENKINS_SERVICE_NAME}_edit
  groupNames: null
  subjects: 
  - kind: ServiceAccount
    name: ${JENKINS_SERVICE_NAME}
  roleRef: 
    name: edit
- kind: Service
  apiVersion: v1
  metadata: 
    name: ${JNLP_SERVICE_NAME}
  spec: 
    ports: 
    - name: agent
      protocol: TCP
      port: 50000
      targetPort: 50000
      nodePort: 0
    selector: 
      name: ${JENKINS_SERVICE_NAME}
    type: ClusterIP
    sessionAffinity: None
- kind: Service
  apiVersion: v1
  metadata: 
    name: ${JENKINS_SERVICE_NAME}
    annotations: 
      service.alpha.openshift.io/dependencies: '[{\"name\": \"${JNLP_SERVICE_NAME}\", \"namespace\": \"\", \"kind\": \"Service\"}]'
      service.openshift.io/infrastructure: 'true'
  spec: 
    ports: 
    - name: web
      protocol: TCP
      port: 80
      targetPort: 8080
      nodePort: 0
    selector: 
      name: ${JENKINS_SERVICE_NAME}
    type: ClusterIP
    sessionAffinity: None
parameters:
- displayName: Application name
  name: APPLICATION_NAME
  required: true
  value: hygieia
- description: Git source URI for application
  displayName: Git source repository
  name: GIT_URI
  required: true
  value: https://github.com/tienhngnguyen/Hygieia-master.git
- description: Git branch/tag reference
  displayName: Git branch/tag reference
  name: GIT_REF
  value: master
- description: Maven mirror url. If nexus is deployed locally, use nexus url (e.g. http://nexus.ci:8081/content/groups/public/)
  displayName: Maven mirror url
  name: MAVEN_MIRROR_URL
- displayName: ImageStream Namespace
  description: Namespace in which the ImageStreams for Red Hat OpenJDK image is installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
  name: IMAGE_STREAM_NAMESPACE
  required: true
  value: openshift
  # MongoDB
- displayName: MongoDB Username
  description: Username for MongoDB
  name: SPRING_DATA_MONGODB_USERNAME
  value: dashboarduser
- displayName: MongoDB User Password
  description: Password for MongoDB user
  name: SPRING_DATA_MONGODB_PASSWORD
  value: dbpassword
- displayName: MongoDB Admin Password
  description: Password for MongoDB Admin
  name: SPRING_DATA_MONGODB_ADMIN_PASSWORD
  value: admin
- displayName: MongoDB Dashboard Database
  description: MongoDB for Dashboard
  name: SPRING_DATA_MONGODB_DATABASE
  value: dashboarddb
- displayName: VOLUME_CAPACITY MongoDB
  name: VOLUME_CAPACITY_MONGO
  description: Volume space available for data, e.g. 512Mi, 2Gi.
  value: 2Gi
  required: true
- displayName: VOLUME_CAPACITY Logs
  name: VOLUME_CAPACITY_LOGS
  description: Volume space available for data, e.g. 512Mi, 2Gi.
  value: 1Gi
  required: true
# Jenkins
- name: JENKINS_SERVICE_NAME
  displayName: Jenkins Service Name
  description: The name of the OpenShift Service exposed for the Jenkins container.
  value: jenkins
- name: JNLP_SERVICE_NAME
  displayName: Jenkins JNLP Service Name
  description: The name of the service used for master/slave communication.
  value: jenkins-jnlp
- name: ENABLE_OAUTH
  displayName: Enable OAuth in Jenkins
  description: Whether to enable OAuth OpenShift integration. If false, the static account 'admin' will be initialized with the password 'password'.
  value: true
- name: MEMORY_LIMIT
  displayName: Memory Limit
  description: Maximum amount of memory the container can use.
  value: 512Mi
- name: VOLUME_CAPACITY_JENKINS
  displayName: Volume Capacity
  description: Volume space available for data, e.g. 512Mi, 2Gi.
  value: 1Gi
  required: true
- name: NAMESPACE
  displayName: Jenkins ImageStream Namespace
  description: The OpenShift Namespace where the Jenkins ImageStream resides.
  value: openshift
- name: JENKINS_IMAGE_STREAM_TAG
  displayName: Jenkins ImageStreamTag
  description: Name of the ImageStreamTag to be used for the Jenkins image.
  value: jenkins:2