apiVersion: v1
kind: Template
metadata:
  annotations:
    iconClass: icon-java
  name: ${APPLICATION_NAME}
objects:
  # Hygieia API
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: ${APPLICATION_NAME}-api
    labels:
      application: ${APPLICATION_NAME}
  spec:
    tags:
    - name: latest
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: ${APPLICATION_NAME}-api
    labels:
      application: ${APPLICATION_NAME}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${APPLICATION_NAME}-api:latest
    source:
      contextDir: api
      git:
        ref: ${GIT_REF}
        uri: ${GIT_URI}
      type: Git
    strategy:
      type: Docker
      dockerStrategy:
        dockerfilePath: docker/Dockerfile
    triggers:
    - type: ConfigChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: ${APPLICATION_NAME}-api
    labels:
      app: ${APPLICATION_NAME}-api
  spec:
    replicas: 0
    selector:
      deploymentconfig: ${APPLICATION_NAME}-api
    strategy:
      resources: {}
      type: Recreate
    template:
      metadata:
        labels:
          app: ${APPLICATION_NAME}-api
          deploymentconfig: ${APPLICATION_NAME}-api
        name: ${APPLICATION_NAME}-api
      spec:
        containers:
        - env:
          - name: SPRING_DATA_MONGODB_DATABASE
            value: ${SPRING_DATA_MONGODB_DATABASE}
          - name: SPRING_DATA_MONGODB_HOST
            value: hygieia-mongodb
          - name: SPRING_DATA_MONGODB_USERNAME
            value: ${SPRING_DATA_MONGODB_USERNAME}
          - name: SPRING_DATA_MONGODB_PASSWORD
            value: ${SPRING_DATA_MONGODB_PASSWORD}
          image: ${APPLICATION_NAME}-api
          imagePullPolicy: Always
          name: ${APPLICATION_NAME}-api
          ports:
          - containerPort: 8778
            name: jolokia
            protocol: TCP
          - containerPort: 8080
            name: http
            protocol: TCP
          livenessProbe:
            failureThreshold: 2
            httpGet:
              path: "/health/liveness"
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreashold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: "/health/readiness"
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreashold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 500Mi
            requests:
              memory: 200Mi
        terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 75
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}-api
        from:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}-api:latest
      type: ImageChange
    - type: ConfigChange
  # Hygieia API Service
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/dependencies: '[{"name":"hygieia-mongodb","namespace":"","kind":"Service"}]'
    labels:
      app: ${APPLICATION_NAME}-api
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-api-http
  spec:
    ports:
    - port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: ${APPLICATION_NAME}-api
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-api-route
  spec:
    to:
      kind: Service
      name: ${APPLICATION_NAME}-api-http
      weight: 100
# MongoDB  
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${APPLICATION_NAME}-mongodb
      comp-type: database
    name: ${APPLICATION_NAME}-mongodb
  spec:
    replicas: 0
    selector:
      deploymentconfig: ${APPLICATION_NAME}-mongodb
    strategy:
      recreateParams:
        post:
          execNewPod:
            command:
              - /bin/sh
              - -i
              - -c
              - env && while ! mongo ${RATING_MONGODB_SERVICE_HOST}:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD --eval="$MONGODB_INIT" > /dev/null 2>&1; do echo "waiting for mongo ..."; sleep 5; done
            containerName: rating-mongodb
            env:
            - name: MONGODB_INIT
              value: 'use dashboarddb;
              db.createUser({user: "dashboarduser", pwd: "dbpassword", roles: [{role: "readWrite", db: "dashboarddb"}]});'
          failurePolicy: ignore
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        labels:
          app: ${APPLICATION_NAME}
          comp-type: database
          deploymentconfig: ${APPLICATION_NAME}-mongodb
      spec:
        containers:
        - env:
          - name: MONGODB_USER
            value: ${SPRING_DATA_MONGODB_USERNAME}
          - name: MONGODB_PASSWORD
            value: ${SPRING_DATA_MONGODB_PASSWORD}
          - name: MONGODB_DATABASE
            value: ${SPRING_DATA_MONGODB_DATABASE}
          - name: MONGODB_ADMIN_PASSWORD
            value: ${SPRING_DATA_MONGODB_ADMIN_PASSWORD}
          image: openshift/mongodb
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 10
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 27017
            timeoutSeconds: 1
          name: ${APPLICATION_NAME}-mongodb
          ports:
          - containerPort: 27017
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD
                --eval="quit()"
            failureThreshold: 10
            initialDelaySeconds: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 512Mi
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/mongodb/data
            name: mongodb-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: mongodb-data
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}-mongodb
        from:
          kind: ImageStreamTag
          name: mongodb:3.2
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
  # MongoDB Service
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-mongodb
  spec:
    ports:
    - name: mongo
      port: 27017
      protocol: TCP
      targetPort: 27017
    selector:
      deploymentconfig: ${APPLICATION_NAME}-mongodb
    sessionAffinity: None
    type: ClusterIP
#Hygieia UI
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: ${APPLICATION_NAME}-ui
    labels:
      app: ${APPLICATION_NAME}-ui
  spec:
    tags:
    - name: latest
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: ${APPLICATION_NAME}-ui
    labels:
      app: ${APPLICATION_NAME}-ui
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${APPLICATION_NAME}-ui:latest
    source:
      contextDir: UI
      git:
        ref: ${GIT_REF}
        uri: ${GIT_URI}
      type: Git
    strategy:
      type: Docker
      dockerStrategy:
        dockerfilePath: docker/Dockerfile
    triggers:
    - imageChange: {}
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: ${APPLICATION_NAME}-ui
    labels:
      app: ${APPLICATION_NAME}-ui
  spec:
    replicas: 1
    selector:
      app: ${APPLICATION_NAME}-ui
      deploymentconfig: ${APPLICATION_NAME}-ui
    strategy:
      resources: {}
      type: Recreate
    template:
      metadata:
        labels:
          app: ${APPLICATION_NAME}-ui
          deploymentconfig: ${APPLICATION_NAME}-ui
      spec:
        containers:
        - env:
          - name: hygieiaapi_SERVICE
            value: hygieia-api-http
          - name: HOSTNAME_HTTP
            value: ${APPLICATION_NAME}-ui:80
          image: ${APPLICATION_NAME}-ui
          imagePullPolicy: Always
          name: ${APPLICATION_NAME}-ui
          ports:
          - containerPort: 80
            protocol: TCP
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /
              port: 80
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5            
          readinessProbe:
            failureThreshold: 10
            httpGet:
              path: /
              port: 80
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}-ui
        from:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}-ui:latest
      type: ImageChange
    - type: ConfigChange
  #Hygieia UI Service
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${APPLICATION_NAME}-ui
    name: ${APPLICATION_NAME}-ui
  spec:
    ports:
    - name: 8088-tcp
      port: 8088
      protocol: TCP
      targetPort: 80
    selector:
      deploymentconfig: ${APPLICATION_NAME}-ui
- apiVersion: v1
  kind: Route
  metadata:
    name: ${APPLICATION_NAME}-ui
  spec:
    to:
      kind: Service
      name: ${APPLICATION_NAME}-ui
parameters:
- displayName: Application name
  name: APPLICATION_NAME
  required: true
  value: hygieia
- description: Git source URI for application
  displayName: Git source repository
  name: GIT_URI
  required: true
  value: https://github.com/tienhngnguyen/Hygieia-master.git
- description: Git branch/tag reference
  displayName: Git branch/tag reference
  name: GIT_REF
  value: master
- description: Maven mirror url. If nexus is deployed locally, use nexus url (e.g. http://nexus.ci:8081/content/groups/public/)
  displayName: Maven mirror url
  name: MAVEN_MIRROR_URL
- displayName: ImageStream Namespace
  description: Namespace in which the ImageStreams for Red Hat OpenJDK image is installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
  name: IMAGE_STREAM_NAMESPACE
  required: true
  value: openshift
  # MongoDB
- displayName: MongoDB Username
  description: Username for MongoDB
  name: SPRING_DATA_MONGODB_USERNAME
  value: dashboarduser
- displayName: MongoDB User Password
  description: Password for MongoDB user
  name: SPRING_DATA_MONGODB_PASSWORD
  value: dbpassword
- displayName: MongoDB Admin Password
  description: Password for MongoDB Admin
  name: SPRING_DATA_MONGODB_ADMIN_PASSWORD
  value: admin
- displayName: MongoDB Dashboard Database
  description: MongoDB for Dashboard
  name: SPRING_DATA_MONGODB_DATABASE
  value: dashboarddb
